plugins {
    id 'java'
    id 'application'
}

sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    flatDir {
        dirs '../libs'  
        dirs 'libs'     
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    
    //implementation name: "multimodal-observer", version: '0.0.0'
    implementation name: "multimodal-observer-server-5", version: '0.0.0'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'org.slf4j:slf4j-simple:1.7.36'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

application {
    mainClassName = 'PluginLauncher.PluginLauncher'
}

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
            'Implementation-Title'   : 'Gradle',
            'Main-Class'             : 'PluginLauncher.PluginLauncher'
            // 'SplashScreen-Image'  : 'images/splash.gif'
            // "Class-Path": "plugins${File.separator}"
        )
    }

    from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        // Agregar estrategia de manejo de duplicados
        duplicatesStrategy = 'exclude' // Esto excluirá los duplicados
    }  

    doLast {
        project.file('build/libs/plugins').mkdirs()
        project.file('build/libs/DefaultProject').mkdirs()
    }

}





//VERSION ANTERIOR

/*plugins {
    id 'java'
    id 'application'
}

sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    flatDir {
        dirs '../libs'  // Carpeta externa
        dirs 'libs'     // Carpeta local
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    
    //implementation name: "multimodal-observer", version: '0.0.0'
    implementation name: "multimodal-observer-server-5", version: '0.0.0'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'org.slf4j:slf4j-simple:1.7.36'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

application {
    mainClassName = 'PluginLauncher.PluginLauncher'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('createFolders') {
    doLast {
        def pluginsDir = file("${buildDir}/libs/plugins")
        if (!pluginsDir.exists()) {
            pluginsDir.mkdirs()
        }
        def projectDir = file("${buildDir}/libs/DefaultProject")
        if (!projectDir.exists()) {
            projectDir.mkdirs()
        }
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': 'PluginLauncher.PluginLauncher'
        )
    }
}

task fatJar(type: Jar) {
    archiveClassifier.set('all') 
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
            'Main-Class': 'PluginLauncher.PluginLauncher' 
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar 
}

tasks.named('build') {
    dependsOn createFolders
    finalizedBy fatJar
}
*/
